{"name": "test_Updating_Category_Name[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: headless chrome=114.0.5735.90)\nStacktrace:\n0   chromedriver                        0x000000010097b6b8 chromedriver + 4937400\n1   chromedriver                        0x0000000100972b73 chromedriver + 4901747\n2   chromedriver                        0x0000000100530616 chromedriver + 435734\n3   chromedriver                        0x0000000100516bc1 chromedriver + 330689\n4   chromedriver                        0x0000000100516923 chromedriver + 330019\n5   chromedriver                        0x0000000100532262 chromedriver + 442978\n6   chromedriver                        0x00000001005b256e chromedriver + 968046\n7   chromedriver                        0x0000000100597de3 chromedriver + 859619\n8   chromedriver                        0x0000000100565d7f chromedriver + 654719\n9   chromedriver                        0x00000001005670de chromedriver + 659678\n10  chromedriver                        0x00000001009372ad chromedriver + 4657837\n11  chromedriver                        0x000000010093c130 chromedriver + 4677936\n12  chromedriver                        0x0000000100942def chromedriver + 4705775\n13  chromedriver                        0x000000010093d05a chromedriver + 4681818\n14  chromedriver                        0x000000010090f92c chromedriver + 4495660\n15  chromedriver                        0x000000010095a838 chromedriver + 4802616\n16  chromedriver                        0x000000010095a9b7 chromedriver + 4802999\n17  chromedriver                        0x000000010096b99f chromedriver + 4872607\n18  libsystem_pthread.dylib             0x00007ff8104171d3 _pthread_start + 125\n19  libsystem_pthread.dylib             0x00007ff810412bd3 thread_start + 15", "trace": "self = <Testcases.test_settingspage.Test_Settings_page object at 0x101e86560>\n\n    @allure.description(\"Updating Category Name\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_Updating_Category_Name(self):\n        self.loginpage = Loginpage(self.driver)\n        sleep(3)\n        self.driver.execute_script(\"window.localStorage.clear();\")\n        sleep(3)\n        self.driver.execute_script(\"window.location.reload(true);\")\n        sleep(2)\n        self.driver.maximize_window()\n        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)\n        self.loginpage.do_click(Loginpage.USERNAME_FIELD)\n        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)\n        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)\n        sleep(2)\n        self.loginpage.do_click(Loginpage.ENTER_OTP)\n        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)\n        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)\n        sleep(5)\n        self.settings_page = SettingsPage(self.driver)\n        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)\n        self.settings_page.do_click(SettingsPage.CATEGORY_TAB)\n        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_ACCORDION)\n        sleep(2)\n        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_EDIT_ICON)\n        sleep(2)\n>       self.settings_page.do_click(SettingsPage.EDIT_CATEGORY_NAME_FIELD)\n\ntest_settingspage.py:512: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Pageobjects/Basepage.py:20: in do_click\n    element = wait.until(EC.visibility_of_element_located(by_locator))\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:125: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:861: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102998bb0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...ff8104171d3 _pthread_start + 125\\\\n19  libsystem_pthread.dylib             0x00007ff810412bd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: headless chrome=114.0.5735.90)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010097b6b8 chromedriver + 4937400\nE       1   chromedriver                        0x0000000100972b73 chromedriver + 4901747\nE       2   chromedriver                        0x0000000100530616 chromedriver + 435734\nE       3   chromedriver                        0x0000000100516bc1 chromedriver + 330689\nE       4   chromedriver                        0x0000000100516923 chromedriver + 330019\nE       5   chromedriver                        0x0000000100532262 chromedriver + 442978\nE       6   chromedriver                        0x00000001005b256e chromedriver + 968046\nE       7   chromedriver                        0x0000000100597de3 chromedriver + 859619\nE       8   chromedriver                        0x0000000100565d7f chromedriver + 654719\nE       9   chromedriver                        0x00000001005670de chromedriver + 659678\nE       10  chromedriver                        0x00000001009372ad chromedriver + 4657837\nE       11  chromedriver                        0x000000010093c130 chromedriver + 4677936\nE       12  chromedriver                        0x0000000100942def chromedriver + 4705775\nE       13  chromedriver                        0x000000010093d05a chromedriver + 4681818\nE       14  chromedriver                        0x000000010090f92c chromedriver + 4495660\nE       15  chromedriver                        0x000000010095a838 chromedriver + 4802616\nE       16  chromedriver                        0x000000010095a9b7 chromedriver + 4802999\nE       17  chromedriver                        0x000000010096b99f chromedriver + 4872607\nE       18  libsystem_pthread.dylib             0x00007ff8104171d3 _pthread_start + 125\nE       19  libsystem_pthread.dylib             0x00007ff810412bd3 thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: WebDriverException"}, "description": "Updating Category Name", "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1691149563108, "stop": 1691149598434, "uuid": "2711e342-3ba7-4093-90a9-4f634ddd7388", "historyId": "a1d47b391c65415566ea7591394e0394", "testCaseId": "c1ec2daa79ff44e04f82a583e2c25293", "fullName": "test_settingspage.Test_Settings_page#test_Updating_Category_Name", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "suite", "value": "test_settingspage"}, {"name": "subSuite", "value": "Test_Settings_page"}, {"name": "host", "value": "Shaiks-MacBook-Pro.local"}, {"name": "thread", "value": "23353-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_settingspage"}]}